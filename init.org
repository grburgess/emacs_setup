#+AUTHOR: J. Michael Burgess
#+TITLE: Emacs configuration file
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes


* About

  This is an Emacs configuration file written in [[http://orgmode.org][Org mode]]. It is an attempt
  to keep my =~/.emacs.d= tidy, but still be able to keep it all in one
  file. I aim to briefly explain all my configurations as I go along!

* Configurations
** Meta

   All changes to the configuration should be done in =init.org=, *not* in
   =init.el=. Any changes in the =init.el= will be overwritten by saving
   =init.org=. The =init.el= in this repo should not be tracked by git, and
   is replaced the first time Emacs is started (assuming it has been renamed
   to =~/.emacs.d=).

   Emacs can't load =.org=-files directly, but =org-mode= provides functions
   to extract the code blocks and write them to a file. There are multiple
   ways of handling this; like suggested by [[http://emacs.stackexchange.com/questions/3143/can-i-use-org-mode-to-structure-my-emacs-or-other-el-configuration-file][this StackOverflow post]], one
   could just use =org-babel-load-file=, but I had problems with
   byte-compilation. Previously I tracked both the =org.=- and =el.=-files,
   but the git commits got a little messy. So here is a new approach.

   When this configuration is loaded for the first time, the ~init.el~ is
   the file that is loaded. It looks like this:

   #+BEGIN_SRC emacs-lisp :tangle no
   ;; This file replaces itself with the actual configuration at first run.


   ;; We can't tangle without org!
   (require 'org)
   ;;(setq my_dir "/Users/jburgess/.emacs.d")

   ;; Open the configuration
   (find-file (concat user-emacs-directory "init.org"))
   ;; tangle it
   (org-babel-tangle)
   ;; load it
   (load-file (concat user-emacs-directory "init.el"))
   ;; finally byte-compile it
   ;;(byte-compile-file (concat user-emacs-directory "init.el"))
   #+END_SRC

   It tangles the org-file, so that this file is overwritten with the actual
   configuration.

   There is no reason to track the =init.el= that is generated; by running
   the following command =git= will not bother tracking it:


   If one wishes to make changes to the repo-version of =init.el= start
   tracking again with:


   I want lexical scoping for the init-file, which can be specified in the
   header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
   ;;; -*- lexical-binding: t -*-
   #+END_SRC

   The =init.el= should (after the first run) mirror the source blocks in
   the =init.org=. We can use =C-c C-v t= to run =org-babel-tangle=, which
   extracts the code blocks from the current file into a source-specific
   file (in this case a =.el=-file).

   To avoid doing this each time a change is made we can add a function to
   the =after-save-hook= ensuring to always tangle and byte-compile the
   =org=-document after changes.

   #+BEGIN_SRC emacs-lisp

   (defun tangle-init ()
     "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
     (when (equal (buffer-file-name)
                  (expand-file-name (concat user-emacs-directory "init.org")))
       ;; Avoid running hooks when tangling.
       (let ((prog-mode-hook nil))
         (org-babel-tangle)
         )))

   (add-hook 'after-save-hook 'tangle-init)
   #+END_SRC

   I'd like to keep a few settings private, so we load a =private.el= if it
   exists after the init-file has loaded.

   #+BEGIN_SRC emacs-lisp

   (setq custom-file "~/.emacs.d/custom.el")
   (load custom-file)
   (setq shell-file-name "/bin/bash")


   #+END_SRC



** Packages

   Managing extensions for Emacs is simplified using =package= which is
   built in to Emacs 24 and newer. To load downloaded packages we need to
   initialize =package=. =cl= is a library that contains many functions from
   Common Lisp, and comes in handy quite often, so we want to make sure it's
   loaded, along with =package=, which is obviously needed.

   #+BEGIN_SRC emacs-lisp

   (require 'cl)
   (require 'package)
   (package-initialize)



   ;; This is only needed once, near the top of the file
   (eval-when-compile
     ;; Following line is not needed if use-package.el is in ~/.emacs.d
     (add-to-list 'load-path "<path where use-package is installed>")
     (require 'use-package))


   (package-refresh-contents)
   #+END_SRC

   Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
   archive and is well maintained.

   #+BEGIN_SRC emacs-lisp

   (setq package-check-signiture nil)

   ;; (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
   ;;                          ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))


   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
   (add-to-list 'package-pinned-packages '(cider . "melpa-stable") t)




   #+END_SRC

   The configuration assumes that the packages listed below are
   installed. To ensure we install missing packages if they are missing.

   #+BEGIN_SRC emacs-lisp
   (let* ((package--builtins nil)
          (packages
           '(auto-compile         ; automatically compile Emacs Lisp libraries
             company              ; Modular text completion framework
             focus                ; Dim color of text in surrounding sections
             idle-require         ; load elisp libraries while Emacs is idle
             jedi                 ; Python auto-completion for Emacs
             magit                ; control Git from Emacs
             markdown-mode        ; Emacs Major mode for Markdown-formatted files
             multiple-cursors     ; Multiple cursors for Emacs
             olivetti             ; Minor mode for a nice writing environment
             org                  ; Outline-based notes management and organizer
             org-ref              ; citations bibliographies in org-mode
             paredit              ; minor mode for editing parentheses
             pdf-tools            ; Emacs support library for PDF files
             slime                ; Superior Lisp Interaction Mode for Emacs
             diminish
             crux
             swiper
             ivy
             counsel
             org-variable-pitch
             org-cliplink
             company-jedi
             which-key
             iedit
             easy-jekyll
             bug-hunter
             cyberpunk-2019-theme
             cyberpunk-theme
             darkroom
             doom-modeline
             doom-themes
             git-gutter-fringe
             org-bullets
             abyss-theme
             afternoon-theme
             ample-theme
             arjen-grey-theme
             atom-dark-theme
             badger-theme
             birds-of-paradise-plus-theme
             calmer-forest-theme
             constant-theme
             dakrone-theme
             dark-krystal-theme
             dark-mint-theme
             darkmine-theme
             darkokai-theme
             distinguished-theme
             exotica-theme
             flatui-dark-theme
             forest-blue-theme
             gotham-theme
             grandshell-theme
             gruber-darker-theme
             hamburg-theme
             idea-darkula-theme
             klere-theme
             kooten-theme
             ivy-rich
             all-the-icons-ivy-rich
             liso-theme
             lush-theme
             cycle-themes
             madhat2r-theme
             majapahit-theme
             metalheart-theme
             monochrome-theme
             monokai-alt-theme
             noctilux-theme
             northcode-theme
             nyx-theme
             paganini-theme
             planet-theme
             reykjavik-theme
             rimero-theme
             sexy-monochrome-theme
             smart-mode-line-atom-one-dark-theme
             soft-charcoal-theme
             soothe-theme
             toxi-theme
             twilight-anti-bright-theme
             warm-night-theme
             zeno-theme
             zerodark-theme
             zweilight-theme
             alect-themes
             apropospriate-theme
             arc-dark-theme
             atom-one-dark-theme
             darktooth-theme
             eziam-theme
             foggy-night-theme
             minimal-theme
             mood-one-theme
             nimbus-theme
             nova-theme
             overcast-theme
             seti-theme
             srcery-theme
             tablist
             forge
             magit-popup
             neotree
             browse-kill-ring
             shell-pop
             use-package
             magithub
             smart-mode-line-powerline-theme
             moe-theme
             undo-tree
             blacken
             company-reftex
             company-auctex
             ace-jump-mode
             sublime-themes
             auto-complete-auctex
             sublimity
             yasnippet
             yasnippet-classic-snippets
             standoff-mode
             elpygen
             projectile
             auto-complete
             smex
             yasnippet-snippets
             yaml-mode
             stan-snippets
             ssh
             flx
             amx
             sphinx-doc
             spacemacs-theme
             rope-read-mode
             rainbow-identifiers
             rainbow-mode
             rainbow-delimiters
             python-docstring
             origami
             omtose-phellack-theme
             markdown-mode
             magit
             kaolin-themes
             js2-mode
             highlight-numbers
             highlight-indent-guides
             gist
             flymake-python-pyflakes
             flycheck
             ess
             elpy
             dockerfile-mode
             cython-mode
             context-coloring
             beacon
             fancy-battery
             company-irony-c-headers
             color-identifiers-mode
             auctex
             counsel-spotify
             green-screen
             challenger-deep
             green-phosphor
             )))
                                           ; Display available keybindings in popup
     (ignore-errors ;; This package is only relevant for Mac OS X.

       (let ((packages (remove-if 'package-installed-p packages)))
         (when packages
           ;; Install uninstalled packages
           (package-refresh-contents)
           (mapc 'package-install packages)))))


                                           ; setup Emacs path from our ~/.zshenv




   #+END_SRC


   #+BEGIN_SRC emacs-lisp

   (use-package exec-path-from-shell
     :ensure t
     :config
     (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)))



   #+END_SRC
** Mac OS X

   I run this configuration mostly on Mac OS X, so we need a couple of
   settings to make things work smoothly. In the package section
   =exec-path-from-shell= is included (only if you're running OS X), this is
   to include environment-variables from the shell. It makes using Emacs
   along with external processes a lot simpler. I also prefer using the
   =Command=-key as the =Meta=-key.

   #+BEGIN_SRC emacs-lisp

   (if (eq system-type 'darwin)
       (defun copy-from-osx ()
         (shell-command-to-string "pbpaste"))

     (defun paste-to-osx (text &optional push)
       (let ((process-connection-type nil))
         (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
           (process-send-string proc text)
           (process-send-eof proc))))

     (setq interprogram-cut-function 'paste-to-osx)
     (setq interprogram-paste-function 'copy-from-osx)
     )
   #+END_SRC

** Sane defaults

   These are what /I/ consider to be saner defaults.

   We can set variables to whatever value we'd like using =setq=.



   Answering /yes/ and /no/ to each question from Emacs can be tedious, a
   single /y/ or /n/ will suffice.

   #+BEGIN_SRC emacs-lisp

   (setq debug-on-error t)

   (menu-bar-mode 0)

   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

   To avoid file system clutter we put all auto saved files in a single
   directory.

   #+BEGIN_SRC emacs-lisp
   (defvar user-temporary-file-directory
     "~/.emacs-autosaves/")

   (make-directory user-temporary-file-directory t)
   (setq backup-by-copying t)
   (setq backup-directory-alist
         `(("." . ,user-temporary-file-directory)
           (tramp-file-name-regexp nil)))
   (setq auto-save-list-file-prefix
         (concat user-temporary-file-directory ".auto-saves-"))
   (setq auto-save-file-name-transforms
         `((".*" ,user-temporary-file-directory t)))



   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (defun tidy ()
     "Ident, untabify and unwhitespacify current buffer, or region if active."
     (interactive)
     (let ((beg (if (region-active-p) (region-beginning) (point-min)))
           (end (if (region-active-p) (region-end) (point-max))))
       (indent-region beg end)
       (whitespace-cleanup)
       (untabify beg (if (< end (point-max)) end (point-max)))))

   (defun kill-this-buffer-unless-scratch ()
     "Works like `kill-this-buffer' unless the current buffer is the
   ,*scratch* buffer. In witch case the buffer content is deleted and
   the buffer is buried."
     (interactive)
     (if (not (string= (buffer-name) "*scratch*"))
         (kill-this-buffer)
       (delete-region (point-min) (point-max))
       (switch-to-buffer (other-buffer))
       (bury-buffer "*scratch*")))

   #+END_SRC

   Set =utf-8= as preferred coding system.

   #+BEGIN_SRC emacs-lisp
   (set-language-environment "UTF-8")
   #+END_SRC

   By default the =narrow-to-region= command is disabled and issues a
   warning, because it might confuse new users. I find it useful sometimes,
   and don't want to be warned.

   #+BEGIN_SRC emacs-lisp
   (put 'narrow-to-region 'disabled nil)
   #+END_SRC

   Automaticly revert =doc-view=-buffers when the file changes on disk.

   #+BEGIN_SRC emacs-lisp
                                           ;  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
   #+END_SRC


** Visual


*** Line numbers
    #+BEGIN_SRC emacs-lisp
    (global-linum-mode 1)

    (setq linum-mode-inhibit-modes-list '(eshell-mode
                                          shell-mode
                                          erc-mode
                                          org-mode
                                          jabber-roster-mode
                                          jabber-chat-mode
                                          gnus-group-mode
                                          gnus-summary-mode
                                          gnus-article-mode))

    (defadvice linum-on (around linum-on-inhibit-for-modes)
      "Stop the load of linum-mode for some major modes."
      (unless (member major-mode linum-mode-inhibit-modes-list)
        ad-do-it))

    (ad-activate 'linum-on)


    #+END_SRC

*** Rainbow mode
    The is for displaying HTML colors from HEX

    #+BEGIN_SRC emacs-lisp
    ;; (use-package rainbow-mode
    ;;   :ensure t

    ;;   )

    (use-package rainbow-mode
      :delight
      :hook (prog-mode . rainbow-mode))
    #+END_SRC

*** Themes

    #+BEGIN_SRC emacs-lisp






    (use-package nimbus-theme
      :ensure t
      :config
      (load-theme 'nimbus t))



    (use-package kaolin-themes
      :ensure t
      :config
      (load-theme 'kaolin-aurora t)
      (load-theme 'kaolin-galaxy t)
      (load-theme 'kaolin-eclipse t)
      (load-theme 'kaolin-mono-dark t)
      )

    (load-theme 'spacemacs-dark t)

    ;; (defun disable-themes (&rest args)
    ;;   (disable-all-themes))

    (defun preserve-font ( &rest args)
      (set-frame-font "JetBrains Mono 13" nil t)
      (add-to-list 'default-frame-alist
                   '(font . "JetBrains Mono 13")))


    ;; (defun remove-mode-line-box (&rest args)
    ;;   (set-face-attribute 'mode-line nil :box nil :underline nil)
    ;;   (set-face-attribute 'mode-line-inactive nil :box nil :underline nil))


    ;; (advice-add 'load-theme :before 'disable-themes)
    ;; (advice-add 'load-theme :after 'remove-mode-line-box)
    (advice-add 'counsel-load-theme :after 'preserve-font)

    (provide 'advice)
    ;; (use-package cycle-themes
    ;;   :ensure t
    ;;   :init (setq cycle-themes-theme-list
    ;;               '( kaolin-aurora kaolin-galaxy kaolin-eclipse nimbus  kaolin-mono-dark ))
    ;;   :config (cycle-themes-mode)

    ;;   (add-hook 'cycle-themes-after-cycle-hook
    ;;             #'(lambda ()
    ;;                 (set-frame-font "JetBrains Mono 13" nil t)
    ;;                 (add-to-list 'default-frame-alist
    ;;                              '(font . "JetBrains Mono 13"))


    ;;                 ))



    ;;   )

    ;;       )))
    #+END_SRC

*** Beacon

    Some nice visual modes
    #+BEGIN_SRC emacs-lisp

    (use-package beacon
      :config
      (progn

        (setq beacon-color "#1BFFA5")
        (setq beacon-push-mark 60)

        (setq beacon-blink-when-point-moves-vertically nil) ; default nil
        (setq beacon-blink-when-point-moves-horizontally nil) ; default nil
        (setq beacon-blink-when-buffer-changes t) ; default t
        (setq beacon-blink-when-window-scrolls t) ; default t
        (setq beacon-blink-when-window-changes t) ; default t
        (setq beacon-blink-when-focused nil) ; default nil

        (setq beacon-blink-duration 0.3) ; default 0.3
        (setq beacon-blink-delay 0.3) ; default 0.3
        (setq beacon-size 20) ; default 40
        ;; (setq beacon-color "yellow") ; default 0.5


        (add-to-list 'beacon-dont-blink-major-modes 'term-mode)

        (beacon-mode 1)))
    #+END_SRC

*** ATI ibuffer
    #+BEGIN_SRC emacs-lisp
    (setq ibuffer-saved-filter-groups
          '(("home"
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . ".init.org")))
             ("Org" (or (mode . org-mode)
                        (filename . "OrgMode")))
             ("latex" (or (mode . tex-mode)
                          (mode . auctex-mode)
                          (mode . latex-mode))
              )
             ("stan" (mode . stan-mode) )

             ("python" (mode . python-mode))
             ("Magit" (name . "\*magit"))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*"))))))

    (add-hook 'ibuffer-mode-hook
              '(lambda ()
                 (ibuffer-switch-to-saved-filter-groups "home")))




    (use-package all-the-icons-ibuffer
      :ensure t
      :init (all-the-icons-ibuffer-mode 1))

    #+END_SRC


*** Ivy-rich

    #+BEGIN_SRC emacs-lisp
    ;; More friendly display transformer for Ivy
    (use-package ivy-rich
      :defines (all-the-icons-dir-icon-alist bookmark-alist)
      :functions (all-the-icons-icon-family
                  all-the-icons-match-to-alist
                  all-the-icons-auto-mode-match?
                  all-the-icons-octicon
                  all-the-icons-dir-is-submodule)
      :preface
      (defun ivy-rich-bookmark-name (candidate)
        (car (assoc candidate bookmark-alist)))

      (defun ivy-rich-repo-icon (candidate)
        "Display repo icons in `ivy-rich`."
        (all-the-icons-octicon "repo" :height .9))

      (defun ivy-rich-org-capture-icon (candidate)
        "Display repo icons in `ivy-rich`."
        (pcase (car (last (split-string (car (split-string candidate)) "-")))
          ("emacs" (all-the-icons-fileicon "emacs" :height .68 :v-adjust .001))
          ("schedule" (all-the-icons-faicon "calendar" :height .68 :v-adjust .005))
          ("tweet" (all-the-icons-faicon "commenting" :height .7 :v-adjust .01))
          ("link" (all-the-icons-faicon "link" :height .68 :v-adjust .01))
          ("memo" (all-the-icons-faicon "pencil" :height .7 :v-adjust .01))
          (_       (all-the-icons-octicon "inbox" :height .68 :v-adjust .01))
          ))

      (defun ivy-rich-org-capture-title (candidate)
        (let* ((octl (split-string candidate))
               (title (pop octl))
               (desc (mapconcat 'identity octl " ")))
          (format "%-25s %s"
                  title
                  (propertize desc 'face `(:inherit font-lock-doc-face)))))

      (defun ivy-rich-buffer-icon (candidate)
        "Display buffer icons in `ivy-rich'."
        (when (display-graphic-p)
          (when-let* ((buffer (get-buffer candidate))
                      (major-mode (buffer-local-value 'major-mode buffer))
                      (icon (if (and (buffer-file-name buffer)
                                     (all-the-icons-auto-mode-match? candidate))
                                (all-the-icons-icon-for-file candidate)
                              (all-the-icons-icon-for-mode major-mode))))
            (if (symbolp icon)
                (setq icon (all-the-icons-icon-for-mode 'fundamental-mode)))
            (unless (symbolp icon)
              (propertize icon
                          'face `(
                                  :height 1.1
                                  :family ,(all-the-icons-icon-family icon)
                                  ))))))

      (defun ivy-rich-file-icon (candidate)
        "Display file icons in `ivy-rich'."
        (when (display-graphic-p)
          (let ((icon (if (file-directory-p candidate)
                          (cond
                           ((and (fboundp 'tramp-tramp-file-p)
                                 (tramp-tramp-file-p default-directory))
                            (all-the-icons-octicon "file-directory"))
                           ((file-symlink-p candidate)
                            (all-the-icons-octicon "file-symlink-directory"))
                           ((all-the-icons-dir-is-submodule candidate)
                            (all-the-icons-octicon "file-submodule"))
                           ((file-exists-p (format "%s/.git" candidate))
                            (all-the-icons-octicon "repo"))
                           (t (let ((matcher (all-the-icons-match-to-alist candidate all-the-icons-dir-icon-alist)))
                                (apply (car matcher) (list (cadr matcher))))))
                        (all-the-icons-icon-for-file candidate))))
            (unless (symbolp icon)
              (propertize icon
                          'face `(
                                  :height 1.1
                                  :family ,(all-the-icons-icon-family icon)
                                  ))))))
      :hook (ivy-rich-mode . (lambda ()
                               (setq ivy-virtual-abbreviate
                                     (or (and ivy-rich-mode 'abbreviate) 'name))))
      :init
      (setq ivy-rich-display-transformers-list
            '(ivy-switch-buffer
              (:columns
               ((ivy-rich-buffer-icon)
                (ivy-rich-candidate (:width 30))
                (ivy-rich-switch-buffer-size (:width 7))
                (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
                (ivy-rich-switch-buffer-project (:width 15 :face success))
                (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
               :predicate
               (lambda (cand) (get-buffer cand)))
              ivy-switch-buffer-other-window
              (:columns
               ((ivy-rich-buffer-icon)
                (ivy-rich-candidate (:width 30))
                (ivy-rich-switch-buffer-size (:width 7))
                (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
                (ivy-rich-switch-buffer-project (:width 15 :face success))
                (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
               :predicate
               (lambda (cand) (get-buffer cand)))
              counsel-M-x
              (:columns
               ((counsel-M-x-transformer (:width 40))
                (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
              counsel-describe-function
              (:columns
               ((counsel-describe-function-transformer (:width 45))
                (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
              counsel-describe-variable
              (:columns
               ((counsel-describe-variable-transformer (:width 45))
                (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face))))
              counsel-find-file
              (:columns
               ((ivy-rich-file-icon)
                (ivy-rich-candidate)))
              counsel-file-jump
              (:columns
               ((ivy-rich-file-icon)
                (ivy-rich-candidate)))
              counsel-dired-jump
              (:columns
               ((ivy-rich-file-icon)
                (ivy-rich-candidate)))
              counsel-git
              (:columns
               ((ivy-rich-file-icon)
                (ivy-rich-candidate)))
              counsel-recentf
              (:columns
               ((ivy-rich-file-icon)
                (ivy-rich-candidate (:width 110))))
              counsel-bookmark
              (:columns
               ((ivy-rich-bookmark-type)
                (ivy-rich-bookmark-name (:width 30))
                (ivy-rich-bookmark-info (:width 80))))
              counsel-projectile-switch-project
              (:columns
               ((ivy-rich-file-icon)
                (ivy-rich-candidate)))
              counsel-fzf
              (:columns
               ((ivy-rich-file-icon)
                (ivy-rich-candidate)))
              ivy-ghq-open
              (:columns
               ((ivy-rich-repo-icon)
                (ivy-rich-candidate)))
              ivy-ghq-open-and-fzf
              (:columns
               ((ivy-rich-repo-icon)
                (ivy-rich-candidate)))
              counsel-projectile-find-file
              (:columns
               ((ivy-rich-file-icon)
                (ivy-rich-candidate)))
              counsel-org-capture
              (:columns
               ((ivy-rich-org-capture-icon)
                (ivy-rich-org-capture-title)
                ))
              counsel-projectile-find-dir
              (:columns
               ((ivy-rich-file-icon)
                (counsel-projectile-find-dir-transformer)))))

      (setq ivy-rich-parse-remote-buffer nil)
      :config
      (ivy-rich-mode 1))


    ;; (use-package all-the-icons-ivy
    ;;   :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup)
    ;;   :config
    ;;   (setq all-the-icons-ivy-file-commands
    ;;      '(counsel-find-file counsel-file-jump counsel-recentf counsel-projectile-find-file counsel-projectile-find-dir))
    ;;   )

    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    ;; Minimap
    (use-package sublimity
      :config (require 'sublimity)
      (require 'sublimity-scroll)
      (setq sublimity-scroll-weight 10
            sublimity-scroll-drift-length 2)                           ;  (require 'sublimity-map)
      (sublimity-mode 1))
                                            ;  (sublimity-map-set-delay 3))
    #+END_SRC


*** doom themes

    #+BEGIN_SRC emacs-lisp
    (use-package doom-themes
      :init

      ;; (require 'sublimity)
      ;; (require 'sublimity-attractive)
      ;; (sublimity-mode 1)

      ;; (setq sublimity-attractive-centering-width 130)

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config)

      ;; (require 'sublimity-scroll)

      ;; (setq sublimity-scroll-weight 10
      ;;       sublimity-scroll-drift-length 10)


      )

    (use-package doom-modeline
      :init
      (doom-modeline-mode 1)

      ;; Whether display icons in mode-line or not.
      (setq doom-modeline-icon t)

      ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
      (setq doom-modeline-major-mode-icon t)


      ;; Whether display color icons for `major-mode'. It respects
      ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
      (setq doom-modeline-major-mode-color-icon t)

      ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
      (setq doom-modeline-buffer-state-icon t)

      ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
      ;; and `doom-modeline-buffer-state-icon'.
      (setq doom-modeline-buffer-modification-icon t)

      ;; Whether display minor modes in mode-line or not.
      (setq doom-modeline-minor-modes nil)

      ;; If non-nil, a word count will be added to the selection-info modeline segment.
      (setq doom-modeline-enable-word-count t)

      ;; If non-nil, only display one number for checker information if applicable.
      (setq doom-modeline-checker-simple-format t)

      ;; The maximum displayed length of the branch name of version control.
      (setq doom-modeline-vcs-max-length 12)


      ;; Whether display perspective name or not. Non-nil to display in mode-line.
      (setq doom-modeline-persp-name t)

      ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
      ;;        (setq doom-modeline-lsp t)

      ;; Wh     ether display github notifications or not. Requires `ghub` package.
      (setq doom-modeline-github t)

      ;; The interval of checking github.
      (setq doom-modeline-github-interval (* 30 60))

      ;; Whether display environment version or not
      (setq doom-modeline-env-version t)
      ;; Or for individual languages
      (setq doom-modeline-env-enable-python t)
      (setq doom-modeline-env-enable-ruby nil)






      ;; Change the executables to use for the language version string
      (setq doom-modeline-env-python-executable "python")
      (setq doom-modeline-env-ruby-executable "ruby")

      ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
      (setq doom-modeline-mu4e nil)

      ;; Whether display irc notifications or not. Requires `circe' package.
      (setq doom-modeline-irc nil)

      ;; Function to stylize the irc buffer names.
      (setq doom-modeline-irc-stylize 'identity)


      )

    #+END_SRC

*** ATIcons

    #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :if window-system
      :ensure t
      :config
      (when (not (member "all-the-icons" (font-family-list)))
        (all-the-icons-install-fonts t)))






    #+END_SRC
*** prettify symbols

    New in Emacs 24.4 is the =prettify-symbols-mode=! It's neat.

    #+BEGIN_SRC emacs-lisp
    (setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                           ("delta" . ?Δ)
                                           ("gamma" . ?Γ)
                                           ("phi" . ?φ)
                                           ("psi" . ?ψ)))
    #+END_SRC

** Modes

   There are some modes that are enabled by default that I don't find
   particularly useful. We create a list of these modes, and disable all of
   these.

   #+BEGIN_SRC emacs-lisp


   (setq inhibit-splash-screen t)
   ;;(add-hook 'after-init-hook 'global-color-identifiers-mode)
   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)


   (use-package highlight-indent-guides
     :ensure t
     :init
     (setq highlight-indent-guides-auto-enabled nil)
     (setq highlight-indent-guides-method 'character)

     (setq highlight-indent-guides-auto-enabled nil)
     :config

     (set-face-background 'highlight-indent-guides-odd-face "seagreen")
     (set-face-background 'highlight-indent-guides-even-face "seagreen")
     (set-face-foreground 'highlight-indent-guides-character-face "seagreen")
     :hook (prog-mode . highlight-indent-guides-mode)

     )


   (dolist (mode
            '(tool-bar-mode                ; No toolbars, more room for text
              scroll-bar-mode              ; No scroll bars either
              ))
     (funcall mode 0))
   #+END_SRC

   Let's apply the same technique for enabling modes that are disabled by
   default.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode
            '(abbrev-mode                  ; E.g. sopl -> System.out.println
              dirtrack-mode                ; directory tracking in *shell*
              global-company-mode          ; Auto-completion everywhere
              global-prettify-symbols-mode ; Greek letters should look gree
              show-paren-mode              ; Highlight matching parentheses
              which-key-mode))             ; Available keybindings in popup
     (funcall mode 1))

   (when (version< emacs-version "24.4")
     (eval-after-load 'auto-compile
       '((auto-compile-on-save-mode 1))))  ; compile .el files on save
   #+END_SRC

** projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :bind (:map projectile-mode-map
		 ("s-p" . 'projectile-command-map)
		 ("C-c p" . 'projectile-command-map)
		 )

     :config
     (setq projectile-completion-system 'ivy)
     (setq projectile-project-search-path '("~/coding/projects/" "~/coding/tml/"))

     (projectile-mode +1))


   (use-package ibuffer-projectile
     :ensure t
     :config
     (add-hook 'ibuffer-hook
	       (lambda ()
		 (ibuffer-projectile-set-filter-groups)
		 (unless (eq ibuffer-sorting-mode 'alphabetic)
		   (ibuffer-do-sort-by-alphabetic))))
     )

   #+END_SRC

** Completion

   I am using company for completion

   #+BEGIN_SRC emacs-lisp


   (setq completion-ignored-extensions
         '(".o" ".elc" "~" ".bin" ".class" ".exe" ".ps" ".abs" ".mx"
           ".~jv" ".rbc" ".pyc" ".beam" ".aux" ".out" ".pdf" ".hbc"))


   (use-package company
     :ensure t
     :diminish ""
     :init
     ;; (add-hook 'prog-mode-hook 'company-mode)
     ;; (add-hook 'comint-mode-hook 'company-mode)
     :config
     (global-company-mode)
     (setq company-tooltip-limit 10)
     (setq company-dabbrev-downcase 0)
     (setq company-idle-delay 0)
     (setq company-echo-delay 0)
     (setq company-minimum-prefix-length 2)
     (setq company-require-match nil)
     (setq company-selection-wrap-around t)
     (setq company-tooltip-align-annotations t)
     ;; (setq company-tooltip-flip-when-above t)
     (setq company-transformers '(company-sort-by-occurrence)) ; weight by frequency
     (define-key company-active-map (kbd "M-n") nil)
     (define-key company-active-map (kbd "M-p") nil)
     (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
     (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
     (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
     (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
     (define-key company-active-map (kbd "C-d") 'company-show-doc-buffer)
     (define-key company-active-map (kbd "C-n") 'company-select-next)
     (define-key company-active-map (kbd "C-p") 'company-select-previous)

     (add-hook 'after-init-hook 'global-company-mode))
                                           ;   (add-to-list 'load-path "path/to/company-auctex.el")


   (use-package company-auctex
     :ensure t
     :defer t
     :hook ((LaTeX-mode . company-auctex-init)))


   (use-package company-jedi
     :ensure t)
   #+END_SRC



   #+BEGIN_SRC emacs-lisp
   (defun org-keyword-backend (command &optional arg &rest ignored)
     (interactive (list 'interactive))
     (cl-case command
       (interactive (company-begin-backend 'org-keyword-backend))
       (prefix (and (eq major-mode 'org-mode)
                    (cons (company-grab-line "^#\\+\\(\\w*\\)" 1)
                          t)))
       (candidates (mapcar #'upcase
                           (cl-remove-if-not
                            (lambda (c) (string-prefix-p arg c))
                            (pcomplete-completions))))
       (ignore-case t)
       (duplicates t)))

   (add-to-list 'company-backends 'org-keyword-backend)

   #+END_SRC

** direnv

   http://www.kotaweaver.com/blog/emacs-python-lsp/
   https://gist.github.com/alexhayes/cb1e6ad873c147502132ae17362a9daf
   https://github.com/direnv/direnv/wiki/Python#virtualenvwrapper


   #+BEGIN_SRC emacs-lisp

   ;; (use-package direnv
   ;;   :ensure t
   ;;   :config
   ;;   (direnv-mode))


   #+END_SRC

** LSP

   #+BEGIN_SRC emacs-lisp
   (use-package lsp-mode
     :ensure t
     :commands lsp


     :custom
     (lsp-auto-guess-root nil)
     (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
     :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
     :hook ((python-mode) . lsp))


   (use-package lsp-ui
     :after lsp-mode
     :diminish
     :commands lsp-ui-mode
     :custom
     (lsp-ui-doc-enable t)
     (lsp-ui-doc-header t)
     (lsp-ui-doc-include-signature t)
     (lsp-ui-doc-position 'top)
     (lsp-ui-doc-border (face-foreground 'default))
     (lsp-ui-sideline-enable nil)
     (lsp-ui-sideline-ignore-duplicate t)
     (lsp-ui-sideline-show-code-actions nil)
     :config
     ;; Use lsp-ui-doc-webkit only in GUI
     (setq lsp-ui-doc-use-webkit nil)
     ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
     ;; https://github.com/emacs-lsp/lsp-ui/issues/243
     (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
       (setq mode-line-format nil)))

   (use-package company-lsp
     :after lsp-mode
     :commands company-lsp
     :init
     (setq company-lsp-async t)
     (setq company-lsp-enable-recompletion t)
     (setq company-lsp-enable-snippet t )
     :config
     (push 'company-lsp company-backends))

   (use-package lsp-ivy
     :bind ("<f1>" . lsp-ivy-global-workspace-symbol))


   #+END_SRC

** snippets

   #+BEGIN_SRC emacs-lisp

   (use-package yasnippet                  ; Snippets
     :ensure t
     :config

     ;;       (yas-reload-all)
     (yas-global-mode)


     ;; (defun check-expansion ()
     ;;   (save-excursion
     ;;         (if (looking-at "\\_>") t
     ;;           (backward-char 1)
     ;;           (if (looking-at "\\.") t
     ;;             (backward-char 1)
     ;;             (if (looking-at "->") t nil)))))


     ;; (defun do-yas-expand ()
     ;;   (let ((yas/fallback-behavior 'return-nil))
     ;;         (yas/expand)))

     (defun tab-indent-or-complete ()
       (interactive)
       (if (minibufferp)
           (minibuffer-complete)
         (if (or (not yas/minor-mode)
                 (null (do-yas-expand)))
             (if (check-expansion)
                 (company-complete-common)
               (indent-for-tab-command)))))


     )

   (use-package yasnippet-snippets         ; Collection of snippets
     :ensure t)

   #+END_SRC






** MAGIT
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :bind (("C-c m" . magit-status)
            ("s-g" . magit-status)))

   (use-package git-commit
     :after magit
     :config
     (setq git-commit-summary-max-length 50)
     (setq git-commit-known-pseudo-headers
           '("Signed-off-by"
             "Acked-by"
             "Modified-by"
             "Cc"
             "Suggested-by"
             "Reported-by"
             "Tested-by"
             "Reviewed-by"))
     (setq git-commit-style-convention-checks
           '(non-empty-second-line
             overlong-summary-line)))

   (use-package magit-diff
     :after magit
     :config
     (setq magit-diff-refine-hunk t))

   (use-package magit-repos
     :after magit
     :commands magit-list-repositories
     :config
     (setq magit-repository-directories
           '(("~/coding/projects" . 1))))

   (use-package git-timemachine
     :ensure t
     :commands git-timemachine)

   (use-package forge
     :after magit)

   #+END_SRC

** ACE/IVY

   Just some jumping around and easy menus


*** ace
    #+BEGIN_SRC emacs-lisp

    (use-package ace-jump-mode
      :bind ("C-x a" . ace-jump-mode))

    #+END_SRC
*** IVY

    #+BEGIN_SRC emacs-lisp

    (use-package counsel
      :diminish ivy-mode counsel-mode
      :defines
      (projectile-completion-system magit-completing-read-function)
      :bind
      (

       )
      :preface
      (defun ivy-format-function-pretty (cands)
        "Transform CANDS into a string for minibuffer."
        (ivy--format-function-generic
         (lambda (str)
           (concat
            (all-the-icons-faicon "hand-o-right" :height .85 :v-adjust .05 :face 'font-lock-constant-face)
            (ivy--add-face str 'ivy-current-match)))
         (lambda (str)
           (concat "  " str))
         cands
         "\n"))
      :hook
      (after-init . ivy-mode)
      (ivy-mode . counsel-mode)
      :custom
      (counsel-yank-pop-height 15)
      (enable-recursive-minibuffers t)
      (ivy-use-selectable-prompt t)
      (ivy-use-virtual-buffers t)
      (ivy-on-del-error-function nil)
      (swiper-action-recenter t)
      (counsel-grep-base-command "ag -S --noheading --nocolor --nofilename --numbers '%s' %s")
      :config
      ;; using ivy-format-fuction-arrow with counsel-yank-pop
      (advice-add
       'counsel--yank-pop-format-function
       :override
       (lambda (cand-pairs)
         (ivy--format-function-generic
          (lambda (str)
            (mapconcat
             (lambda (s)
               (ivy--add-face (concat (propertize "┃ " 'face `(:foreground "#61bfff")) s) 'ivy-current-match))
             (split-string
              (counsel--yank-pop-truncate str) "\n" t)
             "\n"))
          (lambda (str)
            (counsel--yank-pop-truncate str))
          cand-pairs
          counsel-yank-pop-separator)))

      ;; NOTE: this variable do not work if defined in :custom
      (setq ivy-format-function 'ivy-format-function-pretty)
      (setq counsel-yank-pop-separator
            (propertize "\n────────────────────────────────────────────────────────\n"
                        'face `(:foreground "#6272a4")))

      ;; Integration with `magit'
      (with-eval-after-load 'magit
        (setq magit-completing-read-function 'ivy-completing-read))
      )
    ;; Enhance fuzzy matching
    (use-package flx)
    ;; Enhance M-x
    (use-package amx)
    ;; ;; Ivy integration for Projectile
    ;; (use-package counsel-projectile
    ;;   :config (counsel-projectile-mode 1))


    ;; Show ivy frame using posframe
    ;; (use-package ivy-posframe
    ;;   :custom
    ;;   (ivy-display-function #'ivy-posframe-display-at-frame-center)
    ;;   ;; (ivy-posframe-width 130)
    ;;   ;; (ivy-posframe-height 11)
    ;;   (ivy-posframe-parameters
    ;;    '((left-fringe . 5)
    ;;      (right-fringe . 5)))
    ;;   :custom-face
    ;;   (ivy-posframe ((t (:background "#282a36"))))
    ;;   (ivy-posframe-border ((t (:background "#6272a4"))))
    ;;   (ivy-posframe-cursor ((t (:background "#61bfff"))))
    ;;   :hook
    ;;   (ivy-mode . ivy-posframe-enable))




    (use-package swiper

      :ensure t
      :after ivy
      :config
      (setq swiper-action-recenter t)
      (setq swiper-goto-start-of-match t)
      (setq swiper-include-line-number-in-search t)
      :bind (("M-s" . swiper)
             ;;("M-s s" . swiper-multi)
             ;;          ("M-s w" . swiper-thing-at-point)
             :map swiper-map
             ("M-%" . swiper-query-replace)
             ))



    (use-package prescient
      :ensure t
      :config
      (setq prescient-history-length 200)
      (setq prescient-save-file "~/.emacs.d/prescient-items")
      (setq prescient-filter-method '(literal regexp))
      (prescient-persist-mode 1))

    (use-package ivy-prescient

      :ensure t
      :after (prescient ivy)
      :config
      (setq ivy-prescient-sort-commands
            '(:not counsel-grep
                   counsel-rg
                   counsel-switch-buffer
                   ivy-switch-buffer
                   swiper
                   swiper-multi))
      (setq ivy-prescient-retain-classic-highlighting t)
      (setq ivy-prescient-enable-filtering nil)
      (setq ivy-prescient-enable-sorting t)
      (ivy-prescient-mode 1))

    #+END_SRC

** Flyspell

   Flyspell offers on-the-fly spell checking. We can enable flyspell for all
   text-modes with this snippet.

   #+BEGIN_SRC emacs-lisp



   (use-package flyspell
     :commands (ispell-change-dictionary
                ispell-word
                flyspell-buffer
                flyspell-mode
                flyspell-region)
     :config
     (setq flyspell-issue-message-flag nil)
     (setq flyspell-issue-welcome-flag nil)
                                           ;     (setq ispell-program-name "aspell")
     (setq ispell-dictionary "american")
     (add-hook 'text-mode-hook 'flyspell-mode)
     )
   #+END_SRC

** multiple cursors

   adding in [[https://github.com/magnars/multiple-cursors.el][multiple cursors]]

   #+BEGIN_SRC emacs-lisp

   (use-package multiple-cursors
     :bind (

            ("C->" . mc/mark-next-like-this)
            ("C-<" . mc/mark-previous-like-this)
            ("C-c C-<" . mc/mark-all-like-this)
            ("C-S-<mouse-1>" . mc/add-cursor-on-click))
     :bind (:map region-bindings-mode-map
                 ("a" . mc/mark-all-like-this)
                 ("p" . mc/mark-previous-like-this)
                 ("n" . mc/mark-next-like-this)
                 ("P" . mc/unmark-previous-like-this)
                 ("N" . mc/unmark-next-like-this)
                 ("[" . mc/cycle-backward)
                 ("]" . mc/cycle-forward)
                 ("m" . mc/mark-more-like-this-extended)
                 ("h" . mc-hide-unmatched-lines-mode)
                 ("\\" . mc/vertical-align-with-space)
                 ("#" . mc/insert-numbers) ; use num prefix to set the starting number
                 ("^" . mc/edit-beginnings-of-lines)
                 ("$" . mc/edit-ends-of-lines))
     :init
     (progn
       ;; Temporary hack to get around bug # 28524 in emacs 26+
       ;; https://debbugs.gnu.org/cgi/bugreport.cgi?bug=28524
       (setq mc/mode-line
             `(" mc:" (:eval (format ,(propertize "%-2d" 'face 'font-lock-warning-face)
                                     (mc/num-cursors)))))

       (setq mc/list-file (locate-user-emacs-file "mc-lists"))

       ;; Disable the annoying sluggish matching paren blinks for all cursors
       ;; when you happen to type a ")" or "}" at all cursor locations.

       ;; The `multiple-cursors-mode-enabled-hook' and
       ;; `multiple-cursors-mode-disabled-hook' are run in the
       ;; `multiple-cursors-mode' minor mode definition, but they are not declared
       ;; (not `defvar'd). So do that first before using `add-hook'.
       (defvar multiple-cursors-mode-enabled-hook nil
         "Hook that is run after `multiple-cursors-mode' is enabled.")
       (defvar multiple-cursors-mode-disabled-hook nil
         "Hook that is run after `multiple-cursors-mode' is disabled.")

       ))

   #+END_SRC

** Dired


   #+BEGIN_SRC emacs-lisp

   (use-package dired
     :config
     (setq dired-recursive-copies 'always)
     (setq dired-recursive-deletes 'always)
     (setq delete-by-moving-to-trash t)
                                           ;(setq dired-listing-switches "-AFhlv --group-directories-first")
     (setq dired-dwim-target t)
     :hook ((dired-mode . dired-hide-details-mode)
            (dired-mode . hl-line-mode)))

   (use-package dired-aux
     :config
     (setq dired-isearch-filenames 'dwim)
     ;; The following variables were introduced in Emacs 27.1
     (setq dired-create-destination-dirs 'ask)
     (setq dired-vc-rename-file t)
     :bind (:map dired-mode-map
                 ("C-c +" . dired-create-empty-file)
                 ("M-s f" . nil)))

   (use-package find-dired
     :after dired
     :config
     ;; (setq find-ls-option
     ;;       '("-ls" . "-AFhlv --group-directories-first"))
     (setq find-name-arg "-iname"))

   (use-package async
     :ensure t)

   (use-package dired-async
     :after (dired async)
     :hook (dired-mode . dired-async-mode))
   #+END_SRC


   This is the editable state of a dired buffer. You can access it with
   C-x C-q. Write changes to files or directories, as if it were a
   regular buffer, then confirm them with C-c C-c.

   While in writable state, allow the changing of permissions.  While
   renaming a file, any forward slash is treated like a directory and is
   created directly upon successful exit.

   #+BEGIN_SRC emacs-lisp
   (use-package wdired
     :after dired
     :commands wdired-change-to-wdired-mode
     :config
     (setq wdired-allow-to-change-permissions t)
     (setq wdired-create-parent-directories t))

   #+END_SRC


   #+BEGIN_SRC emacs-lisp
   (use-package peep-dired
     :ensure t
     :after dired
     :config
     (setq peep-dired-cleanup-on-disable t)
     (setq peep-dired-enable-on-directories nil)
     (setq peep-dired-ignored-extensions
           '("mkv" "webm" "mp4" "mp3" "ogg" "iso"))
     :bind (:map dired-mode-map
                 ("P" . peep-dired)))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package dired-subtree
     :ensure t
     :after dired
     :config
     (setq dired-subtree-use-backgrounds nil)
     :bind (:map dired-mode-map
                 ("<tab>" . dired-subtree-toggle)
                 ("<C-tab>" . dired-subtree-cycle)
                 ("<S-iso-lefttab>" . dired-subtree-remove)))

   (use-package diredfl
     :ensure t
     :hook (dired-mode . diredfl-mode))


   (use-package wgrep
     :ensure t
     :config
     (setq wgrep-auto-save-buffer t)
     (setq wgrep-change-readonly-file t))


   #+END_SRC

** Python


   I use LSP for python.

   #+BEGIN_SRC emacs-lisp

   (use-package virtualenvwrapper
     :ensure t
     :config
     (venv-initialize-interactive-shells)
     (venv-initialize-eshell))


   (use-package pyvenv
     :ensure t
     :bind (([?\C-c ?\C-x ?v] . pyvenv-workon)))


   (setq python-shell-interpreter "python3"
         python-shell-interpreter-args "-i")


   (defun wcx-restart-python ()

     ;; (set-variable 'ycmd-server-command `(,(executable-find "python3") ,(file-truename "~/.emacs.d/ycmd/ycmd/")))
     (pyvenv-restart-python)
     ;; (ycmd-restart-semantic-server)
     )


   (use-package auto-virtualenvwrapper
     :ensure t
     :config
     (add-hook 'python-mode-hook #'auto-virtualenvwrapper-activate)
     (add-hook 'window-configuration-change-hook #'auto-virtualenvwrapper-activate)
     (add-hook 'projectile-after-switch-project-hook #'auto-virtualenvwrapper-activate)
     (add-hook 'pyvenv-post-activate-hooks 'wcx-restart-python)
     )


   (add-hook 'python-mode-hook (lambda ()
                                 (require 'sphinx-doc)
                                 (sphinx-doc-mode t)))

   #+END_SRC


   #+BEGIN_SRC emacs-lisp

   (use-package blacken
     :ensure t
     :diminish blacken-mode
     ;; :hook (python-mode . blacken-mode)
     :config
     ;; (setq blacken-line-length 100)
     :bind (([?\C-c ?\C-x ?a] . blacken-buffer)))

   #+END_SRC





   #+BEGIN_SRC emacs-lisp


   #+END_SRC





   #+BEGIN_SRC emacs-lisp

   ;; (use-package elpy
   ;;   :ensure t
   ;;   :defer t
   ;;   :init
   ;;   (advice-add 'python-mode :before 'elpy-enable)


   ;;   :config

   ;;   (setq python-shell-interpreter "/usr/local/bin/python3")
   ;;   (setq elpy-rpc-python-command "python3")
   ;;   (setq elpy-rpc-backend "jedi")

   ;;   (add-to-list 'company-backends 'company-jedi)
   ;;   (setq python-shell-interpreter "ipython"
   ;;         python-shell-interpreter-args "-i --simple-prompt")
   ;;   (add-to-list 'auto-mode-alist '("\\.pyx\\'" . cython-mode))
   ;;   (add-to-list 'auto-mode-alist '("\\.ppl\\'" . cython-mode))


   ;;   (define-key elpy-mode-map (kbd "M-.") 'elpy-goto-definition-or-rgrep)

   ;;   :hook ((python-mode . (lambda ()
   ;;                           (require 'sphinx-doc)
   ;;                           (sphinx-doc-mode t)))
   ;;          ;;      (python-mode . elpy-mode)
   ;;          ;;            (elpy-mode . flycheck-mode)
   ;;          (elpy-mode . (lambda () (highlight-indentation-mode -1)))
   ;;          )
   ;;   )




   #+END_SRC

** LaTeX and org-mode LaTeX export
   #+BEGIN_SRC emacs-lisp
   (use-package latex
     :mode
     ("\\.tex\\'" . latex-mode)
     :bind
     (:map LaTeX-mode-map
           ("M-<delete>" . TeX-remove-macro)
           ("C-c C-r" . reftex-query-replace-document)
           ("C-c C-g" . reftex-grep-document))
     :init


     :config

     (setq-default TeX-master nil ; by each new fie AUCTEX will ask for a master fie.
                   TeX-PDF-mode t
                   TeX-engine 'xetex)     ; optional
     (auto-fill-mode 1)
     (setq TeX-auto-save t
           TeX-save-query nil       ; don't prompt for saving the .tex file
           TeX-parse-self t
           TeX-show-compilation nil         ; if `t`, automatically shows compilation log
           LaTeX-babel-hyphen nil ; Disable language-specific hyphen insertion.
           ;; `"` expands into csquotes macros (for this to work, babel pkg must be loaded after csquotes pkg).
           LaTeX-csquotes-close-quote "}"
           LaTeX-csquotes-open-quote "\\enquote{"
           TeX-file-extensions '("Rnw" "rnw" "Snw" "snw" "tex" "sty" "cls" "ltx" "texi" "texinfo" "dtx"))


     (setq reftex-plug-into-AUCTeX t)
     (setq reftex-default-bibliography '("/Users/jburgess/Documents/complete_bib.bib"))

     ;; Font-lock for AuCTeX
     ;; Note: '«' and '»' is by pressing 'C-x 8 <' and 'C-x 8 >', respectively
     (font-lock-add-keywords 'latex-mode (list (list "\\(«\\(.+?\\|\n\\)\\)\\(+?\\)\\(»\\)" '(1 'font-latex-string-face t) '(2 'font-latex-string-face t) '(3 'font-latex-string-face t))))
     ;; Add standard Sweave file extensions to the list of files recognized  by AuCTeX.
     (add-hook 'TeX-mode-hook (lambda () (reftex-isearch-minor-mode)))
     (add-hook 'LaTeX-mode-hook #'TeX-fold-mode) ;; Automatically activate TeX-fold-mode.
     (add-hook 'LaTeX-mode-hook 'TeX-fold-buffer t)

     :hook (

            (LaTeX-mode . reftex-mode)
            (LaTeX-mode . visual-line-mode)
            (LaTeX-mode . flyspell-mode)
            (LaTeX-mode . LaTeX-math-mode)
            (LaTeX-mode . turn-on-reftex)

            )
     )


   #+END_SRC


   LaTeX Setup
   #+BEGIN_SRC emacs-lisp
   ;; (load "auctex.el" nil t t)
   ;; (with-eval-after-load 'latex

   ;;   (auto-fill-mode 1)
   ;;   (require 'reftex)
   ;;   (setq-default TeX-engine 'xetex)
   ;;   (setq TeX-auto-save t)
   ;;   (setq TeX-parse-self t)
   ;;   (setq-default TeX-master nil)

   ;;   (add-hook 'LaTeX-mode-hook 'reftex-mode)
   ;;   (add-hook 'LaTeX-mode-hook 'visual-line-mode)
   ;;   (add-hook 'LaTeX-mode-hook #'TeX-fold-mode) ;; Automatically activate TeX-fold-mode.
   ;;   (add-hook 'LaTeX-mode-hook 'TeX-fold-buffer t)

   ;;   (add-hook 'LaTeX-mode-hook 'flyspell-mode)
   ;;   (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
   ;;   (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
   ;;                                         ;  (add-hook 'LaTeX-mode-hook 'sublimity-mode 1)
   ;;   (setq reftex-plug-into-AUCTeX t)
   ;;   (setq reftex-default-bibliography '("/Users/jburgess/Documents/complete_bib.bib"))


   ;;   )

   #+END_SRC

** Stan

   #+BEGIN_SRC emacs-lisp

   (use-package stan-mode
     :ensure t
     :config


     (with-eval-after-load 'stan

       (require 'stan-snippets)
       (yas-global-mode 1)
       (add-hook 'stan-mode-hook '(lambda () (yas-minor-mode)))

       )

     )

   #+END_SRC

** Org

   I use =org-agenda= along with =org-capture= for appointments and such.

   #+BEGIN_SRC emacs-lisp

   (add-hook 'org-mode-hook 'turn-on-auto-fill)
   (add-hook 'org-mode-hook 'turn-on-flyspell)
   (setq org-directory "~/org")
   (setq org-agenda-files (list "~/org/"))
   (setq org-default-notes-file "~/org/notes.org")
   (setq org-agenda-file-regexp "\\`[^.].*\\.org\\|.todo\\'")
   (global-set-key "\C-cl" 'org-store-link)
   (global-set-key "\C-ca" 'org-agenda)
   (setq org-todo-keywords
         '((sequence "TODO" "READ" "RESEARCH" "|" "DONE" "DELEGATED" )))




                                           ;(setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "<img draggable="false" class="emoji" alt="✔" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/2714.svg"> DONE(d)")
                                           ;(sequence "⚑ WAITING(w)" "|")
                                           ;(sequence "|" "✘ CANCELED(c)")))


   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


   ;; some sexier setup

   (setq org-hide-emphasis-markers t)

   (font-lock-add-keywords 'org-mode
                           '(("^ *\\([-]\\) "
                              (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))


   (when window-system
     (let* ((variable-tuple
             (cond ((x-list-fonts   "Source Sans Pro") '(:font   "Source Sans Pro"))
                   ((x-list-fonts   "JetBrains Mono") '(:font   "JetBrains Mono"))
                   ((x-list-fonts   "Lucida Grande")   '(:font   "Lucida Grande"))
                   ((x-list-fonts   "Verdana")         '(:font   "Verdana"))
                   ((x-family-fonts "Sans Serif")      '(:family "Sans Serif"))
                   (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
            (base-font-color (face-foreground 'default nil 'default))
            (headline       `(:inherit default :weight bold :foreground ,base-font-color)))

       (custom-theme-set-faces
        'user
        `(org-level-8        ((t (,@headline ,@variable-tuple))))
        `(org-level-7        ((t (,@headline ,@variable-tuple))))
        `(org-level-6        ((t (,@headline ,@variable-tuple))))
        `(org-level-5        ((t (,@headline ,@variable-tuple))))
        `(org-level-4        ((t (,@headline ,@variable-tuple :height 1.1))))
        `(org-level-3        ((t (,@headline ,@variable-tuple :height 1.25))))
        `(org-level-2        ((t (,@headline ,@variable-tuple :height 1.5))))
        `(org-level-1        ((t (,@headline ,@variable-tuple :height 1.75))))
        `(org-headline-done  ((t (,@headline ,@variable-tuple :strike-through t))))
        `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
     )
   (require 'org-variable-pitch)

   ;; (setq variable-pitch-mode 1)
   ;; (setq variable-pitch ((t (:family "JetBrains Mono" :height 160 :weight light))))

   ;; (setq fixed-pitch ((t (:family "JetBrains Mono"))))

   (setq org-fontify-done-headline t)

   ;; (setq org-done ((t (:foreground "PaleGreen"
   ;;                         :strike-through t))))

   ;; (setq org-mode . visual-line-mode)
   ;; (setq org-mode . variable-pitch-mode)

   ;;(org-tags-column 0)


   (setq org-todo-keyword-faces
         '(("TODO" . org-warning) ("READ" . "yellow") ("RESEARCH" . (:foreground "blue" :weight bold))
           ("CANCELED" . (:foreground "pink" :weight bold))
           ("WRITING" . (:foreground "red" :weight bold))
           ("RECIEVED" . (:foreground "red" :background "green" :weight bold))
           ("SUBMITTED" . (:foreground "blue"))
           ("ACCEPTED" . (:foreground "green"))


           ))

                             ;;; ORG TEMPLATES
   (setq org-default-notes-file (concat org-directory "/notes.org"))
   (define-key global-map "\C-cc" 'org-capture)


   (setq org-capture-templates
         '(("t" "Todo" entry (file+headline "~/org/notes.org" "Task List")
            "* TODO %?\n%U" :empty-lines 1)

           ("l" "Logbook entry" entry (file+datetree "logbook-work.org") "** %U - %^{Activity}_ %^G :LOG:")


           ("P" "Research project" entry (file "~/org/projects.org")
            "* TODO %^{Project title} :%^G:\n:PROPERTIES:\n:CREATED: %U\n:END:\n%^{Project description}\n** TODO Literature review\n** TODO %?\n** TODO Summary\n** TODO Reports\n** Ideas\n" :clock-in t :clock-resume t)

           ("a" "Research Article" entry(file+headline "~/org/publications.org" "Working articles") "** WRITING %^{Title}\n\t-Added: %U\n   :LOGBOOK:\n   :END:\n")

           ("r" "Ref. Report" entry(file+headline "~/org/publications.org" "Referee reports") "** WRITING %^{Title}\n\t-Added: %U\n   :LOGBOOK:\n   :END:\n")

           ("c" "Coding tips" entry(file+headline "~/org/coding.org" "Refile") "** READ %^{description} %^g  \n\t-Added: %U\n   :LOGBOOK:\n   :END:\n")

                                           ;    ("C" "Cliplink capture code" entry (file+headline  "~/org/coding.org" "Refile" ) "** READ %^{description} %^g  %(org-cliplink-capture) \n\t-Added: %U\n   :LOGBOOK:\n   :END:\n" :empty-lines 1)

           ("f" "Fitting" entry(file+headline "~/org/fitting.org" "Refile") "** READ %^{description}  %^g  \n\t-Added: %U\n   :LOGBOOK:\n   :END:\n")

           ("x" "arXiv" entry(file+headline "~/org/arxiv.org" "To read") "** READ %^L %t")

                                           ;       ("F" "Cliplink capture fitting" entry (file+headline  "~/org/fitting.org" "Refile" ) "** READ %^{description} %^g  %(org-cliplink-capture) \n\t-Added: %U\n   :LOGBOOK:\n   :END:\n" :empty-lines 1)

           )
         )


   ;;
   #+END_SRC

   When editing org-files with source-blocks, we want the source blocks to
   be themed as they would in their native mode.

   #+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t
         org-src-tab-acts-natively t
         org-confirm-babel-evaluate nil
         org-edit-src-content-indentation 0)
   #+END_SRC

   This is quite an ugly fix for allowing code markup for expressions like
   ="this string"=, because the quotation marks causes problems.

   #+BEGIN_SRC emacs-lisp
   ;;(require 'org)
   (eval-after-load "org"
     '(progn
        (setcar (nthcdr 2 org-emphasis-regexp-components) " \t\n,")
        (custom-set-variables `(org-emphasis-alist ',org-emphasis-alist))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp



   #+END_SRC

** Markdown

   This makes =.md=-files open in =markdown-mode=.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
   #+END_SRC

   I sometimes use a specialized markdown format, where inline math-blocks
   can be achieved by surrounding a LaTeX formula with =$math$= and
   =$/math$=. Writing these out became tedious, so I wrote a small function.

   #+BEGIN_SRC emacs-lisp
   (defun insert-markdown-inline-math-block ()
     "Inserts an empty math-block if no region is active, otherwise wrap a
   math-block around the region."
     (interactive)
     (let* ((beg (region-beginning))
            (end (region-end))
            (body (if (region-active-p) (buffer-substring beg end) "")))
       (when (region-active-p)
         (delete-region beg end))
       (insert (concat "$math$ " body " $/math$"))
       (search-backward " $/math$")))
   #+END_SRC

   Most of my writing in this markup is in Norwegian, so the dictionary is
   set accordingly. The markup is also sensitive to line breaks, so
   =auto-fill-mode= is disabled. Of course we want to bind our lovely
   function to a key!

   #+BEGIN_SRC emacs-lisp
   (add-hook 'markdown-mode-hook
             (lambda ()
               (auto-fill-mode 0)
               (visual-line-mode 1)

               (local-set-key (kbd "C-c b") 'insert-markdown-inline-math-block)) t)
   #+END_SRC

** Lisp

   I use =Paredit= when editing lisp code, we enable this for all lisp-modes.

   #+BEGIN_SRC emacs-lisp
   (dolist (mode '(cider-repl-mode
                   clojure-mode
                   ielm-mode
                   geiser-repl-mode
                   slime-repl-mode
                   lisp-mode
                   emacs-lisp-mode
                   lisp-interaction-mode
                   scheme-mode))
     ;; add paredit-mode to all mode-hooks
     (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))
   #+END_SRC

*** Emacs Lisp

    In =emacs-lisp-mode= we can enable =eldoc-mode= to display information
    about a function or a variable in the echo area.

    #+BEGIN_SRC emacs-lisp
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    #+END_SRC

*** Clojure

    #+BEGIN_SRC emacs-lisp
    (add-hook 'cider-repl-mode-hook (lambda () (local-set-key (kbd "C-l") 'cider-repl-clear-buffer)))
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
    (setq cider-cljs-lein-repl
          "(do (require 'figwheel-sidecar.repl-api)
               (figwheel-sidecar.repl-api/start-figwheel!)
               (figwheel-sidecar.repl-api/cljs-repl))")
    #+END_SRC

*** Common lisp

    I use [[http://www.common-lisp.net/project/slime/][Slime]] along with =lisp-mode= to edit Common Lisp code. Slime
    provides code evaluation and other great features, a must have for a
    Common Lisp developer. [[http://www.quicklisp.org/beta/][Quicklisp]] is a library manager for Common Lisp,
    and you can install Slime following the instructions from the site along
    with this snippet.

    #+BEGIN_SRC emacs-lisp
    (defun activate-slime-helper ()
      (when (file-exists-p "~/.quicklisp/slime-helper.el")
        (load (expand-file-name "~/.quicklisp/slime-helper.el"))
        (define-key slime-repl-mode-map (kbd "C-l")
          'slime-repl-clear-buffer))
      (remove-hook 'lisp-mode-hook #'activate-slime-helper))

    (add-hook 'lisp-mode-hook #'activate-slime-helper)
    #+END_SRC

    We can specify what Common Lisp program Slime should use (I use SBCL).

    #+BEGIN_SRC emacs-lisp
    (setq inferior-lisp-program "sbcl")
    #+END_SRC

    More sensible =loop= indentation, borrowed from [[https://github.com/simenheg][simenheg]].

    #+BEGIN_SRC emacs-lisp
    (setq lisp-loop-forms-indentation   6
          lisp-simple-loop-indentation  2
          lisp-loop-keyword-indentation 6)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp

    #+END_SRC

*** Scheme

    [[http://www.nongnu.org/geiser/][Geiser]] provides features similar to Slime for Scheme editing. Everything
    works pretty much out of the box, we only need to add auto completion,
    and specify which scheme-interpreter we prefer.

    #+BEGIN_SRC emacs-lisp
    (eval-after-load "geiser"
      '(setq geiser-active-implementations '(guile)))
    #+END_SRC


** Telegram
   #+BEGIN_SRC emacs-lisp

   (use-package telega
     :commands (telega)
     :defer t)

   #+END_SRC

** spotify

   setup for counsel spoify

   #+BEGIN_SRC emacs-lisp

   (setq counsel-spotify-client-id "ba657d98161647cdad46b0929b9fef75")
   (setq counsel-spotify-client-secret "ef6f60659af9411c9fb42135a9ab63e8")



   #+END_SRC

** Jekyll
   Setup for easy blogging

   #+BEGIN_SRC emacs-lisp

   (setq easy-jekyll-basedir "~/coding/grburgess.github.io/")
   (setq easy-jekyll-url "https://grburgess.github.io")
   ;; (setq easy-jekyll-sshdomain "blogdomain")
   ;; (setq easy-jekyll-root "/home/blog/")
   ;; (setq easy-jekyll-previewtime "300")



   #+END_SRC

* Key bindings

  Inspired by [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][this StackOverflow post]] I keep a =custom-bindings-map= that
  holds all my custom bindings. This map can be activated by toggling a
  simple =minor-mode= that does nothing more than activating the map. This
  inhibits other =major-modes= to override these bindings. I keep this at
  the end of the init-file to make sure that all functions are actually
  defined.


  #+BEGIN_SRC emacs-lisp
  ;; join the line below with the current line
  (global-set-key (kbd "M-j") (lambda () (interactive)
                                (join-line -1)))
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (autoload 'ibuffer "ibuffer" "List buffers." t)

  #+END_SRC


  #+BEGIN_SRC emacs-lisp
  (defvar custom-bindings-map (make-keymap)
    "A keymap for custom bindings.")
  #+END_SRC


** Bindings for [[http://company-mode.github.io/][company-mode]]

   #+BEGIN_SRC emacs-lisp

   #+END_SRC
** Bindings for crux
   #+BEGIN_SRC emacs-lisp

   ;; crux
   (global-set-key   [remap move-beginning-of-line] #'crux-move-beginning-of-line)
   (global-set-key   (kbd "C-<backspace>") #'crux-kill-line-backwards)
   (global-set-key   [remap kill-whole-line] #'crux-kill-whole-line)
   (global-set-key    [(shift return)] #'crux-smart-open-line)
   (global-set-key   (kbd "C-c I")     #'crux-find-user-init-file)

   #+END_SRC

** Bindings for built-ins

   #+BEGIN_SRC emacs-lisp
   (define-key custom-bindings-map (kbd "M-u")         'upcase-dwim)
   (define-key custom-bindings-map (kbd "M-c")         'capitalize-dwim)
   (define-key custom-bindings-map (kbd "M-l")         'downcase-dwim)
   (define-key custom-bindings-map (kbd "M-]")         'other-frame)

   (define-key custom-bindings-map (kbd "C-c s")       'ispell-word)
   (define-key custom-bindings-map (kbd "C-x m")       'mu4e)
   (define-key custom-bindings-map (kbd "C-c <up>")    'windmove-up)
   (define-key custom-bindings-map (kbd "C-c <down>")  'windmove-down)
   (define-key custom-bindings-map (kbd "C-c <left>")  'windmove-left)
   (define-key custom-bindings-map (kbd "C-c <right>") 'windmove-right)
   (define-key custom-bindings-map (kbd "C-c t")
     (lambda () (interactive) (org-agenda nil "n")))
   #+END_SRC

** Bindings for functions defined [[sec:defuns][above]].

   #+BEGIN_SRC emacs-lisp
   (define-key custom-bindings-map (kbd "C-c .")   'cycle-themes)
   (define-key custom-bindings-map (kbd "C-x k")   'kill-this-buffer-unless-scratch)

   #+END_SRC

   Lastly we need to activate the map by creating and activating the
   =minor-mode=.

   #+BEGIN_SRC emacs-lisp
   (define-minor-mode custom-bindings-mode
     "A mode that activates custom-bindings."
     t nil custom-bindings-map)
   #+END_SRC

* diminish
  #+BEGIN_SRC emacs-lisp



  (require 'diminish)

  (diminish 'rainbow-mode)
  (diminish 'auto-fill-mode)
  (diminish 'abbrev-mode)
  (diminish 'auto-revert-mode)
  (diminish 'yas-mode)
  (diminish 'yas-global-mode)
  (diminish 'ivy-mode)
  (diminish 'sphinx-doc-mode)
  (diminish 'which-key-mode)
  (diminish 'global-eldoc-mode)
  (diminish 'global-font-lock-mode)
  (diminish 'highlight-indent-guides-mode)
  (diminish 'elpy-mode)
  (diminish 'abbrev-mode)
  (diminish 'flyspell-mode)
  (diminish 'flycheck-mode)
  (diminish 'font-lock-mode)
  #+END_SRC

* Font

  #+BEGIN_SRC emacs-lisp
  (set-frame-font "JetBrains Mono 13" nil t)
  (add-to-list 'default-frame-alist
               '(font . "JetBrains Mono 13"))



  #+END_SRC

* License
